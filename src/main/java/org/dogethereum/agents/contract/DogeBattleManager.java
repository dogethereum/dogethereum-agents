package org.dogethereum.agents.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.0.
 */
@SuppressWarnings("rawtypes")
public class DogeBattleManager extends Contract {
    public static final String BINARY = "0x6080604052600060015534801561001557600080fd5b50604051612f2c380380612f2c8339818101604052608081101561003857600080fd5b50805160208201516040830151606090930151600680549394929385919060ff1916600183600281111561006857fe5b0217905550600880546001600160a01b0319166001600160a01b03949094169390931790925560025560035550612e88806100a46000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c806371a8c18a1161011a578063a6c07c96116100ad578063db1ee9031161007c578063db1ee903146106bc578063db484ac1146106d9578063e1bafb91146106ff578063eda1970b14610725578063f1afcfa61461072d57610205565b8063a6c07c961461065b578063ba16d60014610678578063d035c40314610680578063d1daeede1461068857610205565b806390b6f699116100e957806390b6f699146105f8578063945fd0c51461060057806399b32f3a146106085780639e30ce2d1461062557610205565b806371a8c18a146104e457806375988c3014610515578063795ea18e1461053e5780637dbd28321461055b57610205565b80633c2f7fb81161019d5780635292a5901161016c5780635292a5901461042a57806361bd8d66146104475780636beb72621461044f5780636c8bb739146104575780636ca640a1146104dc57610205565b80633c2f7fb8146103ee57806341827da714610412578063455e61661461041a5780634955d0851461042257610205565b80630f2c63ff116101d95780630f2c63ff1461034e57806318b011de146103715780631fc8ad6f14610379578063312f6307146103e657610205565b80626622a41461020a57806301c17ec71461023557806306ef4721146102b8578063089845e1146102d2575b600080fd5b6102336004803603606081101561022057600080fd5b5080359060208101359060400135610735565b005b6102336004803603608081101561024b57600080fd5b8135916020810135916040820135919081019060808101606082013564010000000081111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460018302840111640100000000831117156102ad57600080fd5b509092509050610821565b6102c0610a06565b60408051918252519081900360200190f35b610233600480360360608110156102e857600080fd5b81359160208101359181019060608101604082013564010000000081111561030f57600080fd5b82018360208201111561032157600080fd5b8035906020019184602083028401116401000000008311171561034357600080fd5b509092509050610a0d565b6102336004803603604081101561036457600080fd5b5080359060200135610bd6565b6102c0610cb9565b6103966004803603602081101561038f57600080fd5b5035610cbf565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103d25781810151838201526020016103ba565b505050509050019250505060405180910390f35b6102c0610d23565b6103f6610d29565b604080516001600160a01b039092168252519081900360200190f35b6102c0610d3d565b6102c0610d44565b6102c0610d4b565b6102336004803603602081101561044057600080fd5b5035610d51565b6102c0610d7d565b6102c0610d84565b6102336004803603608081101561046d57600080fd5b81359160208101359181019060608101604082013564010000000081111561049457600080fd5b8201836020820111156104a657600080fd5b803590602001918460018302840111640100000000831117156104c857600080fd5b9193509150356001600160a01b0316610d8a565b6102c0610f6e565b610501600480360360208110156104fa57600080fd5b5035610f75565b604080519115158252519081900360200190f35b6102336004803603606081101561052b57600080fd5b5080359060208101359060400135610fc7565b6102c06004803603602081101561055457600080fd5b5035611060565b6105786004803603602081101561057157600080fd5b50356111a0565b604051808d81526020018c81526020018b6001600160a01b031681526020018a6001600160a01b0316815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182600b8111156105dc57fe5b81526020019c5050505050505050505050505060405180910390f35b6102c061120f565b6102c0611216565b6105016004803603602081101561061e57600080fd5b503561121d565b6106426004803603602081101561063b57600080fd5b503561126d565b6040805192835260208301919091528051918290030190f35b6102336004803603602081101561067157600080fd5b5035611286565b6102c06112ff565b6102c0611306565b6102c06004803603606081101561069e57600080fd5b508035906001600160a01b036020820135811691604001351661130d565b610233600480360360208110156106d257600080fd5b5035611429565b610233600480360360208110156106ef57600080fd5b50356001600160a01b0316611451565b6102336004803603602081101561071557600080fd5b50356001600160a01b031661149d565b6102c06114f4565b6102c06114fa565b60008281526020819052604090206003015482906001600160a01b0316331461075d57600080fd5b6000838152602081905260408120906107768285611500565b905080156107ac5760408051868152602081018390528151600080516020612e33833981519152929181900390910190a1610819565b600782018054600101908190554260048401556006830155600282015460408051888152602081018890526001600160a01b039092168282015260608201869052517fc32d73f54fbafb3a4f05d1f05fa0d120659da2f8494eee5a94442fcda572f4159181900360800190a15b505050505050565b60008481526020819052604090206002015484906001600160a01b0316331461084957600080fd5b600080600087815260200190815260200160002090506000806108a483898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061165592505050565b91509150816000146108de5760408051898152602081018490528151600080516020612e33833981519152929181900390910190a16109fb565b6007830180546001019081905542600485015560058401556003830154604080518b8152602081018b90526001600160a01b039092169082018190526060820189905260c0608083018181529083018890527f39eb553cd1a51fa2226da9b6bc983cf6c2d87c588236014a137e080b22fc2036928c928c9290918c918c918c9189919060a0820160e083018686808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b838110156109b95781810151838201526020016109a1565b50505050905090810190601f1680156109e65780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a15b505050505050505050565b620157c081565b60008381526020819052604090206002015483906001600160a01b03163314610a3557600080fd5b60008481526020818152604080832081518684028181018501909352868152909392610a80928592918991899182919085019084908082843760009201919091525061183e92505050565b90508015610ab65760408051878152602081018390528151600080516020612e33833981519152929181900390910190a1610bcd565b60078201805460010190819055426004840155600583015560005b84811015610b3057600183600b016000888885818110610aed57fe5b60209081029290920135835250810191909152604001600020600101805460ff60601b1916600160601b836005811115610b2357fe5b0217905550600101610ad1565b507fbca3431b78418303a430f83db37413835aa6c34f2bc94b5cb93f3c1a56384e6987878460030160009054906101000a90046001600160a01b0316888860405180868152602001858152602001846001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f19169092018290039850909650505050505050a15b50505050505050565b60008181526020819052604090206003015481906001600160a01b03163314610bfe57600080fd5b600082815260208190526040812090610c16826119e8565b90508015610c4c5760408051858152602081018390528151600080516020612e33833981519152929181900390910190a1610cb2565b600782018054600101908190554260048401556006830155600282015460408051878152602081018790526001600160a01b0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60035481565b60008181526020818152604091829020600801805483518184028101840190945280845260609392830182828015610d1657602002820191906000526020600020905b815481526020019060010190808311610d02575b505050505090505b919050565b60015481565b60065461010090046001600160a01b031681565b62018e7081565b62069f5081565b619c4081565b60065461010090046001600160a01b0316338114610d6e57600080fd5b610d79826001611a73565b5050565b6206b6c081565b60045481565b60065461010090046001600160a01b0316338114610da757600080fd5b60508314610db457600080fd5b60008681526005602090815260408083208054845291839052909120600c8101548814610de057600080fd5b6007600d82015460ff16600b811115610df557fe5b14610dff57600080fd5b60028101546001600160a01b03858116911614610e1b57600080fd5b60018201546000908152600b82016020526040902060036001820154600160601b900460ff166005811115610e4c57fe5b14610e5657600080fd5b87816003015414610e6657600080fd5b600281810180546040805160206001841615610100026000190190931694909404601f8101839004830285018301909152808452610f32939291830182828015610ef15780601f10610ec657610100808354040283529160200191610ef1565b820191906000526020600020905b815481529060010190602001808311610ed457829003601f168201915b505050505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b9192505050565b15610f3c57600080fd5b50600d8101805460ff191660081790556007810180546001019081905542600483015560059091015550505050505050565b620cd14081565b60008181526020819052604081206008600d82015460ff16600b811115610f9857fe5b14158015610fad575080600501548160060154115b8015610fc0575060035481600401540142115b9392505050565b60008281526020819052604090206003015482906001600160a01b03163314610fef57600080fd5b60008381526020819052604081209061100a82878787611bf6565b905080156110405760408051868152602081018390528151600080516020612e33833981519152929181900390910190a1610819565b600782018054600101908190554260048401556006830155505050505050565b60008181526020819052604081206008600d82015460ff16600b81111561108357fe5b14156110be576040805184815261c36e60208201528151600080516020612e33833981519152929181900390910190a161c36e915050610d1e565b600b600d82015460ff16600b8111156110d357fe5b14806110f85750806005015481600601541180156110f8575060035481600401540142115b15611128576002810154600182015461111e9185916001600160a01b0390911690611da6565b6000915050610d1e565b80600601548160050154118015611146575060035481600401540142115b1561116c576003810154600182015461111e9185916001600160a01b0390911690611e2f565b6040805184815261c36e60208201528151600080516020612e33833981519152929181900390910190a15061c36e92915050565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460078801546009890154600a8a0154600c8b0154600d909b0154999a98996001600160a01b0398891699979098169795969495939492939192909160ff168c565b6205c49081565b6201388081565b60008181526020819052604081206008600d82015460ff16600b81111561124057fe5b14158015610fad575080600601548160050154118015610fc0575060035460049091015401421192915050565b6005602052600090815260409020805460019091015482565b60008181526020819052604081209061129f8284611eb8565b905080600114156112d057600382015460018301546112cb9185916001600160a01b0390911690611e2f565b6112fa565b80600214156112fa57600282015460018301546112fa9185916001600160a01b0390911690611da6565b505050565b62061a8081565b62035b6081565b6007546000906001600160a01b031633811461132857600080fd5b600180546040805160208082018a9052338284015260608083019490945282518083039094018452608082018084528451948201949094206000818152918290528382208181558087018c90556002810180546001600160a01b038d81166001600160a01b03199283168117909355600384018054918e1691909216811790915542600484015560068301949094556005820188905560078201889055600d8201805460ff19168917905587548801909755948b905260a0830181905260c083019590955260e082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de918190036101000190a15095945050505050565b60065461010090046001600160a01b031633811461144657600080fd5b610d79826000611a73565b6007546001600160a01b031615801561147257506001600160a01b03811615155b61147b57600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60065461010090046001600160a01b03161580156114c357506001600160a01b03811615155b6114cc57600080fd5b600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6184d081565b60025481565b600061150e33619c40611fb9565b61151b575061c38c61164f565b6006600d84015460ff16600b81111561153057fe5b141561153f5761153f8361203d565b600983015415801561156357506003600d84015460ff16600b81111561156157fe5b145b8061158f57506000836009015411801561158f57506005600d84015460ff16600b81111561158d57fe5b145b1561164a5760088301546009840154106115a857600080fd5b60016000838152600b85016020526040902060010154600160601b900460ff1660058111156115d357fe5b146115dd57600080fd5b60006115f0846001015433619c40612099565b509050801561160057905061164f565b505060098201805460019081019091556000828152600b8401602052604081209091018054600160611b60ff60601b19909116179055600d8301805460ff1916600417905561164f565b5061c3645b92915050565b6000606061166533619c40611fb9565b61168357505060408051600081526020810190915261c38c90611835565b6004600d87015460ff16600b81111561169857fe5b141561181f5760006116ad8460006050612136565b6000818152600b89016020526040902090915060026001820154600160601b900460ff1660058111156116dc57fe5b1461171f5761c3696000805b506040519080825280601f01601f191660200182016040528015611713576020820181803683370190505b50935093505050611835565b61172d8860010154866121f1565b61173c5761c3736000806116e8565b60008061174a83898961226a565b915091506000821461179457816000805b506040519080825280601f01601f191660200182016040528015611786576020820181803683370190505b509550955050505050611835565b6001838101805460ff60601b1916600360601b1790558a01546117ba9033619c40612099565b50915081156117cc578160008061175b565b600383015460028b01546000916117f0918c919088906001600160a01b031661245f565b600a8c0180546001019055600d8c01805460ff19166006179055600c8c01555060009550935061183592505050565b505060408051600081526020810190915261c364905b94509492505050565b600061184d3362035b60611fb9565b61185a575061c38c61164f565b60088301541561186957600080fd5b6002600d84015460ff16600b81111561187e57fe5b141561164a5760008061189485600101546124e0565b5050505094505050509150836001855103815181106118af57fe5b602002602001015181146118c95761c3e69250505061164f565b6040516303e6d75f60e61b815260206004820181815286516024840152865173__DogeMessageLibrary____________________9363f9b5d7c093899392839260440191808601910280838360005b83811015611930578181015183820152602001611918565b505050509050019250505060206040518083038186803b15801561195357600080fd5b505af4158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b505182146119915761c3789250505061164f565b60006119a586600101543362035b60612099565b50905080156119b857925061164f915050565b84516119cd9060088801906020880190612d36565b50505050600d8301805460ff1916600317905550600061164f565b60006119f7336205c490611fb9565b611a04575061c38c610d1e565b6001600d83015460ff16600b811115611a1957fe5b1415611a6a57600d8201805460ff191660021790556003820154336001600160a01b0390911614611a4657fe5b6000611a5a8360010154336205c490612099565b509050801561111e579050610d1e565b5061c364919050565b60008281526005602090815260408083208054845291839052909120600c8101548414611a9f57600080fd5b6008600d82015460ff16600b811115611ab457fe5b14611abe57600080fd5b60018201546000908152600b82016020526040902060036001820154600160601b900460ff166005811115611aef57fe5b14611af957600080fd5b611b08828460010154866125f3565b42600483015560018083015484546003808501549387015490860154604080519485526020850193909352838301949094526060830152608082018890526001600160a01b0390921660a082015285151560c082015290517f13a771cb91faa8e8a02bf31e73e4f740eec154e07a621921f8032b2f2283b6e89181900360e00190a15050505050565b60008251605014611ba157600080fd5b8151605014611baf57600080fd5b60208381015190830151808214611bc9579003905061164f565b505060408381015190830151808214611be5579003905061164f565b505050605091820151910151900390565b6000611c0533620157c0611fb9565b611c12575061c38c611d9e565b6006600d86015460ff16600b811115611c2757fe5b1415611d99576000828152600b86016020526040902060036001820154600160601b900460ff166005811115611c5957fe5b1415611d97576000611c73876001015433620157c0612099565b5090508015611c85579150611d9e9050565b6003820154600c880154600289810154604080518b8152602081018b9052908101859052608081018490526001600160a01b0390911660a0820181905260c06060830181815284890180546000196001821615610100020116959095049184018290527fa0a243586b0bd46802910cb3689c5f90d34de99ee8c612f60614bc120f7ebfe6968d968d9691959194909390929060e083019086908015611d6b5780601f10611d4057610100808354040283529160200191611d6b565b820191906000526020600020905b815481529060010190602001808311611d4e57829003601f168201915b505097505050505050505060405180910390a1505050600d8401805460ff191660071790556000611d9e565b505b5061c3645b949350505050565b600083815260208190526040902060038101546002820154611dd891869185916001600160a01b039081169116612684565b611de184612706565b60408051838152602081018690526001600160a01b0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b600083815260208190526040902060028101546003820154611e6191869185916001600160a01b039081169116612684565b611e6a84612706565b60408051838152602081018690526001600160a01b0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b60006006600d84015460ff16600b811115611ecf57fe5b1415611ede57611ede8361203d565b6009600d84015460ff16600b811115611ef357fe5b1415611f8d576000611f048461278c565b90508015611f3f5760408051848152602081018390528151600080516020612e33833981519152929181900390910190a1600291505061164f565b611f48846128fb565b90508015611f835760408051848152602081018390528151600080516020612e33833981519152929181900390910190a1600291505061164f565b600191505061164f565b600b600d84015460ff16600b811115611fa257fe5b1415611fb05750600261164f565b50600092915050565b60075460408051637092a7dd60e11b81526001600160a01b03858116600483015291516000938593169163e1254fba916024808301926020929190829003018186803b15801561200857600080fd5b505afa15801561201c573d6000803e3d6000fd5b505050506040513d602081101561203257600080fd5b505110159392505050565b600c81015461204b57600080fd5b600c8101546000818152600560205260409020805461206957600080fd5b61207983826001015460016125f3565b506000908152600560205260408120818155600101819055600c90910155565b6007546040805163612b4f2d60e11b8152600481018690526001600160a01b038581166024830152604482018590528251600094859492169263c2569e5a92606480830193919282900301818787803b1580156120f557600080fd5b505af1158015612109573d6000803e3d6000fd5b505050506040513d604081101561211f57600080fd5b50805160209091015190925090505b935093915050565b6000611d9e6002612148868686612c06565b604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106121965780518252601f199092019160209182019101612177565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156121d5573d6000803e3d6000fd5b5050506040513d60208110156121ea57600080fd5b5051612c2b565b6000806121ff836000612c56565b63ffffffff1690506000612212856124e0565b505060025494975093955086945085935061222d9250505057fe5b04600254838161223957fe5b041115801561226157506001600254828161225057fe5b0403600254838161225d57fe5b0410155b95945050505050565b60006060600080600073__DogeMessageLibrary____________________63fa7199a187600089518b60001c6040518563ffffffff1660e01b81526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156122f45781810151838201526020016122dc565b50505050905090810190601f1680156123215780820380516001836020036101000a031916815260200191505b509550505050505060806040518083038186803b15801561234157600080fd5b505af4158015612355573d6000803e3d6000fd5b505050506040513d608081101561236b57600080fd5b5080516040820151606090920151909450909250905082156123a2575050604080516000815260208101909152909250905061212e565b6000816123bb576123b68760006050612c8a565b6123cb565b6123cb8760508951038951612c8a565b90506123d8876000612c56565b60018a01805467ffffffffffffffff191663ffffffff92909216919091179055612403876000612cef565b8960010160086101000a81548163ffffffff021916908363ffffffff160217905550612430876000612d23565b895560038901839055805161244e9060028b01906020840190612d81565b506000999098509650505050505050565b600480546001908101918290556040805160208082019790975260609490941b6bffffffffffffffffffffffff191684820152605480850193909352805180850390930183526074840180825283519387019390932060b4850182529683526094909301938452600086815260059095529190932092518355905191015590565b6000806000806000806000806000600860009054906101000a90046001600160a01b03166001600160a01b0316636e5b70718b6040518263ffffffff1660e01b8152600401808281526020019150506101206040518083038186803b15801561254857600080fd5b505afa15801561255c573d6000803e3d6000fd5b505050506040513d61012081101561257357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509850985098509850985098509850985098509193959799909294969850565b6000828152600b84016020526040902081156126575760018101805460ff60601b1916600160621b1790556008840154600a850154141561264257600d8401805460ff19166009179055612652565b600d8401805460ff191660051790555b61267e565b600181018054600560601b60ff60601b19909116179055600d8401805460ff1916600b1790555b50505050565b60075460408051633a45007160e11b815260048101879052602481018690526001600160a01b03858116604483015284811660648301529151919092169163748a00e291608480830192600092919082900301818387803b1580156126e857600080fd5b505af11580156126fc573d6000803e3d6000fd5b5050505050505050565b6000818152602081905260408120818155600181018290556002810180546001600160a01b0319908116909155600382018054909116905560048101829055600581018290556006810182905560078101829055906127686008830182612dfc565b50600060098201819055600a8201819055600c820155600d01805460ff1916905550565b60088101546000906127a1575061c3e6610d1e565b6000806000806127b486600101546124e0565b505060088d018054959b509399509097509550600094509092505060001981019081106127dd57fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff1685146128205761c37395505050505050610d1e565b6000818152600b8801602052604090206001015463ffffffff848116600160401b90920416146128595761c3d295505050505050610d1e565b6008870154600110156128c257600887018054600119810190811061287a57fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff1684146128bd5761c37395505050505050610d1e565b6128ee565b6128cb826124e0565b50949b505050888a1494506128ee93505050505761c37395505050505050610d1e565b5060009695505050505050565b60008060008060008060008061291489600101546124e0565b50959d509a5061292c95508a94506124e09350505050565b50959c5091995092975090955090935060009250829150505b60088b0154821015612bba5760008b600801838154811061296257fe5b6000918252602080832090910154808352600b8f0190915260409091206001810154905491925063ffffffff600160401b909104169088146129b35761c3829b505050505050505050505050610d1e565b600260065460ff1660028111156129c657fe5b14612ad657600073__DogeMessageLibrary____________________637034991b888a03886040518363ffffffff1660e01b8152600401808360070b81526020018263ffffffff1681526020019250505060206040518083038186803b158015612a2f57600080fd5b505af4158015612a43573d6000803e3d6000fd5b505050506040513d6020811015612a5957600080fd5b50519050600160065460ff166002811115612a7057fe5b148015612a9f57506000838152600b8f016020526040902060010154607867ffffffffffffffff909116899003115b15612aab5750631e0fffff5b8063ffffffff168263ffffffff1614612ad45761c3d29c50505050505050505050505050610d1e565b505b6000828152600b8e016020908152604091829020600101548251630c13be2b60e21b8152600160401b90910463ffffffff166004820152915173__DogeMessageLibrary____________________9263304ef8ac926024808301939192829003018186803b158015612b4757600080fd5b505af4158015612b5b573d6000803e3d6000fd5b505050506040513d6020811015612b7157600080fd5b50516000838152600b8f016020526040902060019081015493995067ffffffffffffffff8416989750600160401b90930463ffffffff1695509390910192919091019050612945565b600260065460ff166002811115612bcd57fe5b14158015612bdd57508881890114155b15612bf55761c3c89950505050505050505050610d1e565b5060009a9950505050505050505050565b60006040516020818486602089010160025afa612c2257600080fd5b51949350505050565b600060405160005b6020811015612c4e578381601f031a81830153600101612c33565b505192915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b606082820360008167ffffffffffffffff81118015612ca857600080fd5b506040519080825280601f01601f191660200182016040528015612cd3576020820181803683370190505b5090508160208201838760208a010160045afa61226157600080fd5b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b81810160240151600090611d9e81612c2b565b828054828255906000526020600020908101928215612d71579160200282015b82811115612d71578251825591602001919060010190612d56565b50612d7d929150612e1d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612db75760008555612d71565b82601f10612dd057805160ff1916838001178555612d71565b82800160010185558215612d715791820182811115612d71578251825591602001919060010190612d56565b5080546000825590600052602060002090810190612e1a9190612e1d565b50565b5b80821115612d7d5760008155600101612e1e56fe80235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa26469706673582212202ea99e404727da025171d36e77ca184e3e164feed1cb1cfa7fdd50f361dfede064736f6c63430007060033";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_NUMSCRYPTHASHVERIFICATIONS = "numScryptHashVerifications";

    public static final String FUNC_QUERYBLOCKHEADERCOST = "queryBlockHeaderCost";

    public static final String FUNC_QUERYMERKLEROOTHASHESCOST = "queryMerkleRootHashesCost";

    public static final String FUNC_REQUESTSCRYPTCOST = "requestScryptCost";

    public static final String FUNC_RESPONDBLOCKHEADERCOST = "respondBlockHeaderCost";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_SCRYPTHASHVERIFICATIONS = "scryptHashVerifications";

    public static final String FUNC_SESSIONS = "sessions";

    public static final String FUNC_SESSIONSCOUNT = "sessionsCount";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_SUPERBLOCKDURATION = "superblockDuration";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_TRUSTEDSCRYPTCHECKER = "trustedScryptChecker";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_SETSCRYPTCHECKER = "setScryptChecker";

    public static final String FUNC_SETDOGECLAIMMANAGER = "setDogeClaimManager";

    public static final String FUNC_BEGINBATTLESESSION = "beginBattleSession";

    public static final String FUNC_QUERYMERKLEROOTHASHES = "queryMerkleRootHashes";

    public static final String FUNC_RESPONDMERKLEROOTHASHES = "respondMerkleRootHashes";

    public static final String FUNC_QUERYBLOCKHEADER = "queryBlockHeader";

    public static final String FUNC_RESPONDBLOCKHEADER = "respondBlockHeader";

    public static final String FUNC_REQUESTSCRYPTHASHVALIDATION = "requestScryptHashValidation";

    public static final String FUNC_VERIFYSUPERBLOCK = "verifySuperblock";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_SCRYPTSUBMITTED = "scryptSubmitted";

    public static final String FUNC_SCRYPTVERIFIED = "scryptVerified";

    public static final String FUNC_SCRYPTFAILED = "scryptFailed";

    public static final String FUNC_GETCHALLENGERHITTIMEOUT = "getChallengerHitTimeout";

    public static final String FUNC_GETSUBMITTERHITTIMEOUT = "getSubmitterHitTimeout";

    public static final String FUNC_GETDOGEBLOCKHASHES = "getDogeBlockHashes";

    public static final Event CHALLENGERCONVICTED_EVENT = new Event("ChallengerConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORBATTLE_EVENT = new Event("ErrorBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWBATTLE_EVENT = new Event("NewBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYBLOCKHEADER_EVENT = new Event("QueryBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event QUERYMERKLEROOTHASHES_EVENT = new Event("QueryMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTSCRYPTHASHVALIDATION_EVENT = new Event("RequestScryptHashValidation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESOLVEDSCRYPTHASHVALIDATION_EVENT = new Event("ResolvedScryptHashValidation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event RESPONDBLOCKHEADER_EVENT = new Event("RespondBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event RESPONDMERKLEROOTHASHES_EVENT = new Event("RespondMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SUBMITTERCONVICTED_EVENT = new Event("SubmitterConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1611781691726", "0x507c0C01fF834b77CE6Aab573436d2468743FA73");
        _addresses.put("1611783520013", "0x2E7f3e3930F57851dDeF462797682C663059145f");
    }

    @Deprecated
    protected DogeBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DogeBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCONVICTED_EVENT));
        return challengerConvictedEventFlowable(filter);
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORBATTLE_EVENT, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORBATTLE_EVENT, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORBATTLE_EVENT));
        return errorBattleEventFlowable(filter);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBATTLE_EVENT, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBATTLE_EVENT, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBATTLE_EVENT));
        return newBattleEventFlowable(filter);
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryBlockHeaderEventResponse> queryBlockHeaderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYBLOCKHEADER_EVENT, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QueryBlockHeaderEventResponse> queryBlockHeaderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYBLOCKHEADER_EVENT));
        return queryBlockHeaderEventFlowable(filter);
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYMERKLEROOTHASHES_EVENT));
        return queryMerkleRootHashesEventFlowable(filter);
    }

    public List<RequestScryptHashValidationEventResponse> getRequestScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTSCRYPTHASHVALIDATION_EVENT, transactionReceipt);
        ArrayList<RequestScryptHashValidationEventResponse> responses = new ArrayList<RequestScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequestScryptHashValidationEventResponse> requestScryptHashValidationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RequestScryptHashValidationEventResponse>() {
            @Override
            public RequestScryptHashValidationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTSCRYPTHASHVALIDATION_EVENT, log);
                RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequestScryptHashValidationEventResponse> requestScryptHashValidationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSCRYPTHASHVALIDATION_EVENT));
        return requestScryptHashValidationEventFlowable(filter);
    }

    public List<ResolvedScryptHashValidationEventResponse> getResolvedScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESOLVEDSCRYPTHASHVALIDATION_EVENT, transactionReceipt);
        ArrayList<ResolvedScryptHashValidationEventResponse> responses = new ArrayList<ResolvedScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ResolvedScryptHashValidationEventResponse> resolvedScryptHashValidationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ResolvedScryptHashValidationEventResponse>() {
            @Override
            public ResolvedScryptHashValidationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESOLVEDSCRYPTHASHVALIDATION_EVENT, log);
                ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ResolvedScryptHashValidationEventResponse> resolvedScryptHashValidationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESOLVEDSCRYPTHASHVALIDATION_EVENT));
        return resolvedScryptHashValidationEventFlowable(filter);
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondBlockHeaderEventResponse> respondBlockHeaderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDBLOCKHEADER_EVENT, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RespondBlockHeaderEventResponse> respondBlockHeaderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDBLOCKHEADER_EVENT));
        return respondBlockHeaderEventFlowable(filter);
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDMERKLEROOTHASHES_EVENT));
        return respondMerkleRootHashesEventFlowable(filter);
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBMITTERCONVICTED_EVENT));
        return submitterConvictedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> challengeCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minChallengeDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minProposalDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minReward() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> numScryptHashVerifications() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMSCRYPTHASHVERIFICATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> queryBlockHeaderCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUERYBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> queryMerkleRootHashesCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUERYMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> requestScryptCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REQUESTSCRYPTCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> respondBlockHeaderCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESPONDBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> respondMerkleRootHashesCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<byte[], byte[]>> scryptHashVerifications(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SCRYPTHASHVERIFICATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple2<byte[], byte[]>>(function,
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>> sessions(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SESSIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>(function,
                new Callable<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>() {
                    @Override
                    public Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (byte[]) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> sessionsCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SESSIONSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockDuration() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockTimeout() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> trustedScryptChecker() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRUSTEDSCRYPTCHECKER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> verifySuperblockCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSCRYPTCHECKER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDogeClaimManager(String _dogeClaimManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDOGECLAIMMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dogeClaimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> beginBattleSession(byte[] superblockHash, String submitter, String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BEGINBATTLESESSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(submitter), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> queryMerkleRootHashes(byte[] superblockHash, byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_QUERYMERKLEROOTHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> respondMerkleRootHashes(byte[] superblockHash, byte[] sessionId, List<byte[]> blockHashes) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPONDMERKLEROOTHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(blockHashes, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> queryBlockHeader(byte[] superblockHash, byte[] sessionId, byte[] blockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_QUERYBLOCKHEADER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> respondBlockHeader(byte[] superblockHash, byte[] sessionId, byte[] blockScryptHash, byte[] blockHeader) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RESPONDBLOCKHEADER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockScryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(blockHeader)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestScryptHashValidation(byte[] superblockHash, byte[] sessionId, byte[] blockSha256Hash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REQUESTSCRYPTHASHVALIDATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockSha256Hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifySuperblock(byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFYSUPERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> timeout(byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> scryptSubmitted(byte[] scryptChallengeId, byte[] _scryptHash, byte[] _data, String _submitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SCRYPTSUBMITTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_scryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(_data), 
                new org.web3j.abi.datatypes.Address(_submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> scryptVerified(byte[] scryptChallengeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SCRYPTVERIFIED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> scryptFailed(byte[] scryptChallengeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SCRYPTFAILED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> getChallengerHitTimeout(byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGERHITTIMEOUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> getSubmitterHitTimeout(byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUBMITTERHITTIMEOUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<List> getDogeBlockHashes(byte[] sessionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDOGEBLOCKHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static DogeBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DogeBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DogeBattleManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DogeBattleManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ChallengerConvictedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;
    }

    public static class ErrorBattleEventResponse extends BaseEventResponse {
        public byte[] sessionId;

        public BigInteger err;
    }

    public static class NewBattleEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public String challenger;
    }

    public static class QueryBlockHeaderEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public byte[] blockSha256Hash;
    }

    public static class QueryMerkleRootHashesEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }

    public static class RequestScryptHashValidationEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] proposalId;

        public String submitter;
    }

    public static class ResolvedScryptHashValidationEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockSha256Hash;

        public byte[] proposalId;

        public String challenger;

        public Boolean valid;
    }

    public static class RespondBlockHeaderEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] powBlockHeader;
    }

    public static class RespondMerkleRootHashesEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public List<byte[]> blockHashes;
    }

    public static class SubmitterConvictedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }
}
