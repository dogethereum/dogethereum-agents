package org.dogethereum.agents.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.2.
 */
@SuppressWarnings("rawtypes")
public class DogeClaimManager extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b5060405161312f38038061312f833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a090950151600280546001600160a01b039687166001600160a01b03199182161790915560038054969095169516949094179092556006556007556004919091556005556130918061009e6000396000f3fe60806040526004361061024a5760003560e01c80636896463411610139578063ba16d600116100b6578063d035c4031161007a578063d035c403146107ed578063dac1d76414610802578063e1254fba1461082c578063eda1970b1461085f578063eff0f59214610874578063fc7e286d146108ed5761025a565b8063ba16d6001461071b578063bf0e1edb14610730578063c2569e5a1461075a578063c3d3290f14610799578063c44205e3146107c35761025a565b806390b6f699116100fd57806390b6f69914610679578063945fd0c51461068e5780639c57588f146106a35780639e84477d146106dc578063a8b4633f146106f15761025a565b8063689646341461059d5780636ca640a1146105b2578063748a00e2146105c75780638e20eb101461061057806390a14aea146106645761025a565b80633352f1a4116101c75780634955d0851161018b5780634955d085146104d557806355e4286b146104ea578063578724881461052d5780635bf7d5db1461054257806361bd8d66146105885761025a565b80633352f1a41461044f57806340732c891461047957806341827da71461048157806343207e6314610496578063455e6166146104c05761025a565b806313be4f9e1161020e57806313be4f9e1461039857806318b011de146103c257806327b425a6146103d757806329118a9b146103ec57806333289a46146104255761025a565b8063032e55871461025f578063040aa57a146102d957806306ef47211461031d5780630ac0d9c9146103445780630d5f5d691461036e5761025a565b3661025a57610257610920565b50005b600080fd5b34801561026b57600080fd5b506102896004803603602081101561028257600080fd5b5035610940565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c55781810151838201526020016102ad565b505050509050019250505060405180910390f35b3480156102e557600080fd5b50610309600480360360408110156102fc57600080fd5b50803590602001356109b3565b604080519115158252519081900360200190f35b34801561032957600080fd5b5061033261111e565b60408051918252519081900360200190f35b34801561035057600080fd5b506103096004803603602081101561036757600080fd5b5035611125565b34801561037a57600080fd5b506103096004803603602081101561039157600080fd5b503561113c565b3480156103a457600080fd5b50610309600480360360208110156103bb57600080fd5b5035611154565b3480156103ce57600080fd5b506103326115cf565b3480156103e357600080fd5b506103326115d5565b3480156103f857600080fd5b506103326004803603604081101561040f57600080fd5b50803590602001356001600160a01b03166115db565b34801561043157600080fd5b506103326004803603602081101561044857600080fd5b503561161f565b34801561045b57600080fd5b506103096004803603602081101561047257600080fd5b50356116e4565b610332610920565b34801561048d57600080fd5b50610332611be8565b3480156104a257600080fd5b50610332600480360360208110156104b957600080fd5b5035611bef565b3480156104cc57600080fd5b50610332611c0c565b3480156104e157600080fd5b50610332611c13565b3480156104f657600080fd5b506105146004803603602081101561050d57600080fd5b5035611c19565b6040805192835260208301919091528051918290030190f35b34801561053957600080fd5b50610332611ef4565b34801561054e57600080fd5b5061056c6004803603602081101561056557600080fd5b5035611efa565b604080516001600160a01b039092168252519081900360200190f35b34801561059457600080fd5b50610332611f19565b3480156105a957600080fd5b5061056c611f20565b3480156105be57600080fd5b50610332611f2f565b3480156105d357600080fd5b5061060e600480360360808110156105ea57600080fd5b508035906020810135906001600160a01b0360408201358116916060013516611f36565b005b34801561061c57600080fd5b50610514600480360360e081101561063357600080fd5b5080359060208101359060408101359060608101359060808101359063ffffffff60a0820135169060c0013561201c565b34801561067057600080fd5b5061056c61232d565b34801561068557600080fd5b5061033261233c565b34801561069a57600080fd5b50610332612343565b3480156106af57600080fd5b50610332600480360360408110156106c657600080fd5b50803590602001356001600160a01b031661234a565b3480156106e857600080fd5b50610332612376565b3480156106fd57600080fd5b506103096004803603602081101561071457600080fd5b503561237c565b34801561072757600080fd5b50610332612461565b34801561073c57600080fd5b506103326004803603602081101561075357600080fd5b5035612468565b34801561076657600080fd5b506105146004803603606081101561077d57600080fd5b508035906001600160a01b03602082013516906040013561247d565b3480156107a557600080fd5b50610332600480360360208110156107bc57600080fd5b50356125ed565b3480156107cf57600080fd5b50610309600480360360208110156107e657600080fd5b5035612602565b3480156107f957600080fd5b5061033261261f565b34801561080e57600080fd5b506103096004803603602081101561082557600080fd5b5035612626565b34801561083857600080fd5b506103326004803603602081101561084f57600080fd5b50356001600160a01b0316612644565b34801561086b57600080fd5b5061033261265f565b34801561088057600080fd5b5061089e6004803603602081101561089757600080fd5b5035612665565b604080519889526001600160a01b0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b3480156108f957600080fd5b506103326004803603602081101561091057600080fd5b50356001600160a01b03166126bb565b600061092c33346126cd565b503360009081526020819052604090205490565b60008181526001602090815260409182902060038101805484518185028101850190955280855260609492938301828280156109a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610987575b50505050509150505b919050565b6000818152600160208190526040822082919084905b868214610b83576109d98161275f565b610a14576040805188815261c3a06020820152815160008051602061301b833981519152929181900390910190a16000945050505050611118565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d6020811015610a8a57600080fd5b50516005811115610a9757fe5b14610ad3576040805188815261c3646020820152815160008051602061301b833981519152929181900390910190a16000945050505050611118565b828015610ae35750600381015415155b15610aed57600092505b60025460408051632af00c6760e11b81526004810185905290516001600160a01b03909216916355e018ce91602480820192602092909190829003018186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d6020811015610b6357600080fd5b5051600081815260016020819052604090912095019490925090506109c9565b600454841015610bc4576040805188815261c3dc6020820152815160008051602061301b833981519152929181900390910190a16000945050505050611118565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610c1057600080fd5b505afa158015610c24573d6000803e3d6000fd5b505050506040513d6020811015610c3a57600080fd5b50516005811115610c4757fe5b14610c83576040805188815261c3646020820152815160008051602061301b833981519152929181900390910190a16000945050505050611118565b60025460408051632af00c6760e11b8152600481018a905290516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d6020811015610cf957600080fd5b505190506004600254604080516365702c0f60e11b81526004810185905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015610d4b57600080fd5b505afa158015610d5f573d6000803e3d6000fd5b505050506040513d6020811015610d7557600080fd5b50516005811115610d8257fe5b14610dbf576040805189815261c3646020820152815160008051602061301b833981519152929181900390910190a1600095505050505050611118565b600254604080516395b45ee760e01b8152600481018b905233602482015281516000936001600160a01b0316926395b45ee7926044808201939182900301818787803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505050506040513d6040811015610e3857600080fd5b505190508015610e7a57604080518a815260208101839052815160008051602061301b833981519152929181900390910190a160009650505050505050611118565b6001830154604080518b81526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610ecc8984612771565b6001830154610ee5908a906001600160a01b0316612829565b5050841561110d5760008667ffffffffffffffff81118015610f0657600080fd5b50604051908082528060200260200182016040528015610f30578160200160208202803683370190505b50905088945060005b8a8614610fd85785828281518110610f4d57fe5b60209081029190910181019190915260025460408051632af00c6760e11b8152600481018a905290516001600160a01b03909216926355e018ce92602480840193829003018186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d6020811015610fcc57600080fd5b50519550600101610f39565b801561110a57600181039050818181518110610ff057fe5b60209081029190910181015160008181526001909252604080832060025482516395b45ee760e01b8152600481018590523360248201528351949b509199506001600160a01b0316936395b45ee793604480840194939192918390030190829087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d604081101561108957600080fd5b50519250821561109857600080fd5b6001850154604080518881526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a16110ea8686612771565b60018501546111039087906001600160a01b0316612829565b5050610fd8565b50505b600196505050505050505b92915050565b620157c081565b60008181526001602052604081206111189061275f565b60009081526001602052604090206008015460ff1690565b600081815260016020526040812061116b8161275f565b6111a3576040805184815261c3a06020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b60025460408051632e40019160e01b81526004810186905290516000926001600160a01b031691632e400191916024808301926020929190829003018186803b1580156111ef57600080fd5b505afa158015611203573d6000803e3d6000fd5b505050506040513d602081101561121957600080fd5b50516002546040805163f06d520d60e01b8152905163ffffffff90931693506000926001600160a01b039092169163f06d520d91600480820192602092909190829003018186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d602081101561129757600080fd5b50516004805460025460408051632e40019160e01b815293840185905251939450908501926001600160a01b0390911691632e400191916024808301926020929190829003018186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d602081101561131757600080fd5b505163ffffffff16101561135b576040805186815261c3dc6020820152815160008051602061301b833981519152929181900390910190a1600093505050506109ae565b6002546040805163c0dde98b60e01b81526004810185905290516001600160a01b039092169163c0dde98b91602480820192602092909190829003018186803b1580156113a757600080fd5b505afa1580156113bb573d6000803e3d6000fd5b505050506040513d60208110156113d157600080fd5b505190508481146115c457600254604080516365702c0f60e11b81526004810188905290516000926001600160a01b03169163cae0581e916024808301926020929190829003018186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d602081101561145257600080fd5b50519050600381600581111561146457fe5b146114a0576040805187815261c3646020820152815160008051602061301b833981519152929181900390910190a160009450505050506109ae565b6008840154610100900460ff166114e8576040805187815261c3b46020820152815160008051602061301b833981519152929181900390910190a160009450505050506109ae565b60025460408051633a102bc360e11b81526004810189905233602482015281516001600160a01b03909316926374205786926044808401939192918290030181600087803b15801561153957600080fd5b505af115801561154d573d6000803e3d6000fd5b505050506040513d604081101561156357600080fd5b50506001840154604080518881526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a16115b78685612914565b60019450505050506109ae565b506000949350505050565b60075481565b60045481565b60008281526001602052604081206115f28161275f565b6115fb57600080fd5b6001600160a01b038316600090815260049091016020526040902054905092915050565b3360009081526020819052604081205482111561163b57600080fd5b336000908152602081905260409020546116559083612b20565b33600081815260208190526040808220939093559151909184156108fc02918591818181858888f19350505050158015611693573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60008181526001602052604081206116fb8161275f565b611733576040805184815261c3a06020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b600881015460ff1615611774576040805184815261c3aa6020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b600881015462010000900460ff16156118735760088101805461ff001916610100179055600254815460408051633a102bc360e11b8152600481019290925233602483015280516001600160a01b039093169263742057869260448082019392918290030181600087803b1580156117eb57600080fd5b505af11580156117ff573d6000803e3d6000fd5b505050506040513d604081101561181557600080fd5b50506001810154604080518581526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a16118698382612914565b60009150506109ae565b806007015442116118b2576040805184815261c36e6020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b6003810154600582015410156118f6576040805184815261c3aa6020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b60088101805461ff0019166101001790556003810154600090611a2957600254825460408051632af00c6760e11b81526004810192909252516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d602081101561198b57600080fd5b5051600254604080516365702c0f60e11b81526004810184905290519293506000926001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d6020811015611a0957600080fd5b505190506004816005811115611a1b57fe5b1415611a2657600192505b50505b8015611b16576002548254604080516395b45ee760e01b8152600481019290925233602483015280516001600160a01b03909316926395b45ee79260448082019392918290030181600087803b158015611a8257600080fd5b505af1158015611a96573d6000803e3d6000fd5b505050506040513d6040811015611aac57600080fd5b50506001820154611ac79085906001600160a01b0316612829565b50506001820154604080518681526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1611bde565b6002548254604080516327426f7560e01b8152600481019290925233602483015280516001600160a01b03909316926327426f759260448082019392918290030181600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b505050506040513d6040811015611b9357600080fd5b50506001820154604080518681526001600160a01b03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b5060019392505050565b62018e7081565b600090815260016020526040902060058101546003909101540390565b62069f5081565b619c4081565b60025460009081906001600160a01b0316611c3357600080fd5b6000838152600160205260409020611c4a8161275f565b611c86576040805185815261c3a06020820152815160008051602061301b833981519152929181900390910190a161c3a0849250925050611eef565b6008810154610100900460ff1615611cd0576040805185815261c3b46020820152815160008051602061301b833981519152929181900390910190a161c3b4849250925050611eef565b33600090815260208190526040902054620cd1401115611d22576040805185815261c38c6020820152815160008051602061301b833981519152929181900390910190a161c38c849250925050611eef565b6002546040805163c1f67ab360e01b81526004810187905233602482015281516000936001600160a01b03169263c1f67ab3926044808201939182900301818787803b158015611d7157600080fd5b505af1158015611d85573d6000803e3d6000fd5b505050506040513d6040811015611d9b57600080fd5b505190508015611ddb576040805186815260208101839052815160008051602061301b833981519152929181900390910190a1925060009150611eef9050565b6005546040805163612b4f2d60e11b81526004810188905233602482015260448101929092528051309263c2569e5a9260648083019391928290030181600087803b158015611e2957600080fd5b505af1158015611e3d573d6000803e3d6000fd5b505050506040513d6040811015611e5357600080fd5b505190508015611e5f57fe5b6007805442019083015560038201805460018101825560009182526020918290200180546001600160a01b03191633908117909155604080518881529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff16611ee557611ee385612b62565b505b6000859350935050505b915091565b60065481565b600090815260016020819052604090912001546001600160a01b031690565b6206b6c081565b6003546001600160a01b031681565b620cd14081565b6003546001600160a01b03163314611f4d57600080fd5b6000838152600160205260409020611f648161275f565b611f6d57600080fd5b60088101805460ff1916905560018101546001600160a01b0383811691161415611fa95760088101805462ff0000191662010000179055611fcc565b60018101546001600160a01b038481169116141561025a57611fca84612b62565b505b604080518681526001600160a01b03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b60025460009081906001600160a01b031661203657600080fd5b3360009081526020819052604090205462069f50111561208857604080516000815261c38c6020820152815160008051602061301b833981519152929181900390910190a15061c38c90506000612321565b42600654880111156120cc57604080516000815261c3736020820152815160008051602061301b833981519152929181900390910190a15061c37390506000612321565b60025460408051631636b2a560e31b8152600481018c9052602481018b9052604481018a9052606481018990526084810188905263ffffffff871660a482015260c481018690523360e4820152815160009384936001600160a01b039091169263b1b5952892610104808301939282900301818787803b15801561214f57600080fd5b505af1158015612163573d6000803e3d6000fd5b505050506040513d604081101561217957600080fd5b508051602090910151909250905081156121c0576040805182815260208101849052815160008051602061301b833981519152929181900390910190a19092509050612321565b60008181526001602052604090206121d78161275f565b15612215576040805183815261c3a06020820152815160008051602061301b833981519152929181900390910190a15061c3a0935091506123219050565b8181556001810180546001600160a01b031916339081179091556000600580840182905560088401805462ffffff1916905542600285018190556007805490910190850155546040805163612b4f2d60e11b815260048101879052602481019490945260448401919091528051309363c2569e5a9360648083019493928390030190829087803b1580156122a857600080fd5b505af11580156122bc573d6000803e3d6000fd5b505050506040513d60408110156122d257600080fd5b5051925082156122de57fe5b6040805183815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a150600093509150505b97509795505050505050565b6002546001600160a01b031681565b6205c49081565b6201388081565b60008281526001602090815260408083206001600160a01b038516845260060190915290205492915050565b60055481565b600081815260016020526040812060028054604080516365702c0f60e11b81526004810187905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b1580156123d757600080fd5b505afa1580156123eb573d6000803e3d6000fd5b505050506040513d602081101561240157600080fd5b5051600581111561240e57fe5b1480156124265750600881015462010000900460ff16155b80156124375750600881015460ff16155b80156124465750806007015442115b801561245a57506003810154600582015410155b9392505050565b62061a8081565b60009081526001602052604090206007015490565b60035460009081906001600160a01b031633148061249a57503330145b6124a357600080fd5b60008581526001602052604090206124ba8161275f565b6124cd5761c3a0600092509250506125e5565b6001600160a01b038516600090815260208190526040902054841115612512575050506001600160a01b03821660009081526020819052604090205461c38c906125e5565b6001600160a01b0385166000908152602081905260409020546125359085612b20565b6001600160a01b0386166000908152602081815260408083209390935560048401905220546125649085612e29565b6001600160a01b038616600081815260048401602090815260409182902093909355805189815292830191909152818101869052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a16001600160a01b03851660009081526004909101602052604081205490925090505b935093915050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b62035b6081565b60009081526001602052604090206008015462010000900460ff1690565b6001600160a01b031660009081526020819052604090205490565b6184d081565b60016020819052600091825260409091208054918101546002820154600583015460078401546008909401546001600160a01b0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b6001600160a01b0382166000908152602081905260409020546126f09082612e29565b6001600160a01b038316600090815260208190526040902081905547101561271757600080fd5b604080516001600160a01b03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b600101546001600160a01b0316151590565b60008060005b60038401548110156128075783600301818154811061279257fe5b60009182526020808320909101546001600160a01b0390811680845260048801909252604080842080549085905560018901549092168452909220549094509092506127de9083612e29565b6001808601546001600160a01b0316600090815260048701602052604090209190915501612777565b5060018301546128219085906001600160a01b0316612829565b505050505050565b600082815260016020526040812081906128428161275f565b6128555761c3a06000925092505061290d565b6008810154610100900460ff166128755761c3646000925092505061290d565b6001600160a01b0384166000908152600482016020908152604080832080549084905591839052909120546128aa9082612e29565b6001600160a01b0386166000818152602081815260409182902093909355805189815292830191909152818101839052517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1600093509150505b9250929050565b60018101546001600160a01b03166000908152600482016020526040812080549082905590805b83600501548110156129955761298b84600401600086600301848154811061295f57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548390612e29565b915060010161293b565b50600080805b8560050154831015612a45578560030183815481106129b657fe5b60009182526020808320909101546001600160a01b0316808352600489019091526040909120549092506129f79085906129f1908890612e83565b90612edc565b6001600160a01b0383166000908152600488016020526040902054909150612a1f9082612e29565b6001600160a01b038316600090815260048801602052604090205560019092019161299b565b60008093505b6003870154841015612b1657866003018481548110612a6657fe5b60009182526020808320909101546001600160a01b031680835260048a01825260408084205492849052909220549194509150612aa39082612e29565b6001600160a01b0384166000818152602081815260408083209490945560048b0181528382209190915582518b81529081019190915280820183905290517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1836001019350612a4b565b5050505050505050565b600061245a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f1e565b6000818152600160205260408120612b798161275f565b612bb1576040805184815261c3a06020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b6008810154610100900460ff1680612bd35750600881015462010000900460ff165b15612c0c576040805184815261c3b46020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b600881015460ff1615612c4d576040805184815261c3aa6020820152815160008051602061301b833981519152929181900390910190a160009150506109ae565b600381015460058201541015612e2057600380546001830154600584015492840180546000946001600160a01b039485169463d1daeede948a949116929091908110612c9557fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518463ffffffff1660e01b815260040180848152602001836001600160a01b03168152602001826001600160a01b031681526020019350505050602060405180830381600087803b158015612d0957600080fd5b505af1158015612d1d573d6000803e3d6000fd5b505050506040513d6020811015612d3357600080fd5b5051600583015460038401805492935083926006860192600092918110612d5657fe5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f8499489941692908110612dc257fe5b60009182526020918290200154604080519485526001600160a01b0393841692850192909252919091168282015260608201849052519081900360800190a15060088101805460ff1916600190811790915560058201805490910190555b50600192915050565b60008282018381101561245a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612e9257506000611118565b82820282848281612e9f57fe5b041461245a5760405162461bcd60e51b815260040180806020018281038252602181526020018061303b6021913960400191505060405180910390fd5b600061245a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612fb5565b60008184841115612fad5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f72578181015183820152602001612f5a565b50505050905090810190601f168015612f9f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836130045760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612f72578181015183820152602001612f5a565b50600083858161301057fe5b049594505050505056fe94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220804cc18cbfbf24ca238da3786336ca01da05af87d8496040c205028fda94df6a64736f6c63430007060033";

    public static final String FUNC_BATTLEREWARD = "battleReward";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_QUERYBLOCKHEADERCOST = "queryBlockHeaderCost";

    public static final String FUNC_QUERYMERKLEROOTHASHESCOST = "queryMerkleRootHashesCost";

    public static final String FUNC_REQUESTSCRYPTCOST = "requestScryptCost";

    public static final String FUNC_RESPONDBLOCKHEADERCOST = "respondBlockHeaderCost";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_TRUSTEDDOGEBATTLEMANAGER = "trustedDogeBattleManager";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMVERIFICATIONONGOING = "getClaimVerificationOngoing";

    public static final String FUNC_GETCLAIMCHALLENGETIMEOUT = "getClaimChallengeTimeout";

    public static final String FUNC_GETCLAIMREMAININGCHALLENGERS = "getClaimRemainingChallengers";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_GETCLAIMCHALLENGERS = "getClaimChallengers";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1611781691726", "0x04067539f745655A8B5115ABC28dAffc37e0E441");
        _addresses.put("1611783520013", "0x6bddb490703e5F78b436fB192998181c3b9a3A6f");
    }

    @Deprecated
    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DogeClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.winner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.loser = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> battleReward() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BATTLEREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> challengeCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>> claims(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>(function,
                new Callable<Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>>() {
                    @Override
                    public Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<byte[], String, BigInteger, BigInteger, BigInteger, Boolean, Boolean, Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> deposits(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> minChallengeDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minProposalDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minReward() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> queryBlockHeaderCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUERYBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> queryMerkleRootHashesCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_QUERYMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> requestScryptCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REQUESTSCRYPTCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> respondBlockHeaderCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESPONDBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> respondMerkleRootHashesCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockConfirmations() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockDelay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> superblockTimeout() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> trustedDogeBattleManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRUSTEDDOGEBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> trustedSuperblocks() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> verifySuperblockCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawDeposit(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> bondDeposit(byte[] superblockHash, String account, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBondedDeposit(byte[] superblockHash, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getDeposit(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeSuperblock(byte[] _blocksMerkleRoot, BigInteger _accumulatedWork, BigInteger _timestamp, BigInteger _prevTimestamp, byte[] _lastHash, BigInteger _lastBits, byte[] _parentHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_blocksMerkleRoot), 
                new org.web3j.abi.datatypes.generated.Uint256(_accumulatedWork), 
                new org.web3j.abi.datatypes.generated.Uint256(_timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(_prevTimestamp), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lastHash), 
                new org.web3j.abi.datatypes.generated.Uint32(_lastBits), 
                new org.web3j.abi.datatypes.generated.Bytes32(_parentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challengeSuperblock(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkClaimFinished(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmClaim(byte[] superblockHash, byte[] descendantId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(descendantId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectClaim(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sessionDecided(byte[] sessionId, byte[] superblockHash, String winner, String loser) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(winner), 
                new org.web3j.abi.datatypes.Address(loser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> getInBattleAndSemiApprovable(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getClaimSubmitter(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getNewSuperblockEventTimestamp(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> getClaimExists(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> getClaimDecided(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> getClaimInvalid(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> getClaimVerificationOngoing(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMVERIFICATIONONGOING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getClaimChallengeTimeout(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMCHALLENGETIMEOUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getClaimRemainingChallengers(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMREMAININGCHALLENGERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getSession(byte[] superblockHash, String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<List> getClaimChallengers(byte[] superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCLAIMCHALLENGERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DogeClaimManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DogeClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DogeClaimManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations, BigInteger _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations), 
                new org.web3j.abi.datatypes.generated.Uint256(_battleReward)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations, BigInteger _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations), 
                new org.web3j.abi.datatypes.generated.Uint256(_battleReward)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations, BigInteger _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations), 
                new org.web3j.abi.datatypes.generated.Uint256(_battleReward)));
        return deployRemoteCall(DogeClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DogeClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _superblocks, String _dogeBattleManager, BigInteger _superblockDelay, BigInteger _superblockTimeout, BigInteger _superblockConfirmations, BigInteger _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.Address(_dogeBattleManager), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDelay), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockConfirmations), 
                new org.web3j.abi.datatypes.generated.Uint256(_battleReward)));
        return deployRemoteCall(DogeClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String account;

        public BigInteger amount;
    }

    public static class DepositMadeEventResponse extends BaseEventResponse {
        public String who;

        public BigInteger amount;
    }

    public static class DepositUnbondedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String account;

        public BigInteger amount;
    }

    public static class DepositWithdrawnEventResponse extends BaseEventResponse {
        public String who;

        public BigInteger amount;
    }

    public static class ErrorClaimEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public BigInteger err;
    }

    public static class SuperblockBattleDecidedEventResponse extends BaseEventResponse {
        public byte[] sessionId;

        public String winner;

        public String loser;
    }

    public static class SuperblockClaimChallengedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String challenger;
    }

    public static class SuperblockClaimCreatedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimFailedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimPendingEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String submitter;
    }

    public static class SuperblockClaimSuccessfulEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String submitter;
    }

    public static class VerificationGameStartedEventResponse extends BaseEventResponse {
        public byte[] superblockHash;

        public String submitter;

        public String challenger;

        public byte[] sessionId;
    }
}
