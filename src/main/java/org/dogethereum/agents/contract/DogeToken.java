package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b506040516060806200360c833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b6133c980620002436000396000f3006080604052600436106101875763ffffffff60e060020a60003504166305347cdc811461018c57806306fdde03146101b3578063095ea7b31461023d57806318160ddd1461027557806323b872dd1461028a578063313ce567146102b45780633e974531146102df57806341f7a1f7146103485780634b48a8421461041557806354fd4d501461043757806355569d7f1461044c5780635be3b1b9146104b7578063636a8515146104ce578063657857de146104fc5780636d440c6b1461059357806370a08231146105b55780637b837b7a146105d657806395d89b41146105fb5780639ed0031614610610578063a9059cbb14610628578063b4eae1cb1461064c578063b52d521d14610661578063ba24ecab14610676578063c0f76faf146106a3578063c5a4a2b7146106bb578063cae9ca51146106f7578063cf496b1014610760578063d48e6a9a14610791578063d63ceb46146108a2578063dd62ed3e146108e9578063dd8f13bb14610910578063f5b2040014610925578063f997d47f1461093a575b600080fd5b34801561019857600080fd5b506101a16109a5565b60408051918252519081900360200190f35b3480156101bf57600080fd5b506101c86109ad565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102025781810151838201526020016101ea565b50505050905090810190601f16801561022f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024957600080fd5b50610261600160a060020a0360043516602435610a3b565b604080519115158252519081900360200190f35b34801561028157600080fd5b506101a1610aa1565b34801561029657600080fd5b50610261600160a060020a0360043581169060243516604435610aa7565b3480156102c057600080fd5b506102c9610b74565b6040805160ff9092168252519081900360200190f35b3480156102eb57600080fd5b506103016001606060020a031960043516610b7d565b60408051600160a060020a03909716875260208701959095528585019390935263ffffffff9091166060850152608084015262ffffff1660a0830152519081900360c00190f35b34801561035457600080fd5b5061036663ffffffff60043516610bc8565b60408051600160a060020a038816815290810185905260608101849052608081018390526001606060020a0319821660a082015260c06020808301828152885192840192909252875160e084019189019080838360005b838110156103d55781810151838201526020016103bd565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561042157600080fd5b506101a16001606060020a031960043516610ca4565b34801561044357600080fd5b506101c8610cc3565b34801561045857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261026194369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050610d1e565b6104cc6001606060020a031960043516611192565b005b3480156104da57600080fd5b506104e36111f3565b6040805163ffffffff9092168252519081900360200190f35b34801561050857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104cc94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506112189650505050505050565b34801561059f57600080fd5b506104cc6001606060020a03196004351661156c565b3480156105c157600080fd5b506101a1600160a060020a03600435166116e4565b3480156105e257600080fd5b506104cc6001606060020a0319600435166024356116ff565b34801561060757600080fd5b506101c8611824565b34801561061c57600080fd5b5061026160043561187f565b34801561063457600080fd5b50610261600160a060020a036004351660243561190e565b34801561065857600080fd5b506102c9611986565b34801561066d57600080fd5b506101a16119a7565b34801561068257600080fd5b5061068b6119af565b6040805162ffffff9092168252519081900360200190f35b3480156106af57600080fd5b506104cc6004356119b6565b3480156106c757600080fd5b506106d36004356119d2565b604080516001606060020a0319909316835290151560208301528051918290030190f35b34801561070357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610261948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750611a1c9650505050505050565b34801561076c57600080fd5b50610775611bb7565b60408051600160a060020a039092168252519081900360200190f35b34801561079d57600080fd5b506107af63ffffffff60043516611bc6565b60408051600160a060020a03891681529081018690526060810185905260a081018390526001606060020a0319821660c082015260e0602080830182815289519284019290925288516080840191610100850191908b019080838360005b8381101561082557818101518382015260200161080d565b50505050905090810190601f1680156108525780820380516001836020036101000a031916815260200191505b508381038252865181528651602091820191808901910280838360005b8381101561088757818101518382015260200161086f565b50505050905001995050505050505050505060405180910390f35b3480156108ae57600080fd5b506108c76001606060020a031960043516602435611d44565b60408051938452602084019290925261ffff1682820152519081900360600190f35b3480156108f557600080fd5b506101a1600160a060020a0360043581169060243516611da6565b34801561091c57600080fd5b50610775611dd1565b34801561093157600080fd5b506101a1611de0565b34801561094657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a194369492936024939284019190819084018382808284375094975050843595505050506020909101356001606060020a0319169050611de6565b6311e1a30081565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a0383166000908152600160205260408120548211801590610af25750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610afd57600080fd5b600160a060020a038084166000818152600160209081526040808320805488019055938816808352848320805488900390556002825284832033845282529184902080548790039055835186815293519293919260008051602061337e8339815191529281900390910190a35060015b9392505050565b60045460ff1681565b600b60205260009081526040902080546001820154600283015460048401546005850154600690950154600160a060020a03909416949293919263ffffffff9091169162ffffff1686565b6009602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f8101869004860283018601909652858252600160a060020a03909216949293909290830182828015610c725780601f10610c4757610100808354040283529160200191610c72565b820191906000526020600020905b815481529060010190602001808311610c5557829003601f168201915b50505050600283015460038401546005850154600690950154939491939092506c010000000000000000000000000286565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a335780601f10610a0857610100808354040283529160200191610a33565b600080606060008060006311e1a300881015610d5c576040805161eab08152905160008051602061335e8339815191529181900360200190a1611186565b33600090815260016020526040902054881115610d9b576040805161eaba8152905160008051602061335e8339815191529181900360200190a1611186565b6001606060020a031987166000908152600b602052604090208054909550600160a060020a03161515610df0576040805161eac48152905160008051602061335e8339815191529181900360200190a1611186565b8785600101541015610e24576040805161eace8152905160008051602061335e8339815191529181900360200190a1611186565b6040805160e0810182528654600160a060020a031681526001870154602080830191909152600288015482840152600388018054845181840281018401909552808552610f04948d94938b936060860193909160009084015b82821015610ecd5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101610e7d565b50505090825250600482015463ffffffff1660208201526005820154604082015260069091015462ffffff16606090910152612079565b9196509450925090508015610f395760408051828152905160008051602061335e8339815191529181900360200190a1611186565b33600081815260016020908152604080832080548d9003905580518c8152905192939260008051602061337e833981519152929181900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198916602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a16040805160e08101825233815260208082018c81528284018c90524260608401526080830188905260a083018790526001606060020a03198b1660c08401526008547501000000000000000000000000000000000000000000900463ffffffff16600090815260098352939093208251815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178155925180519293926110889260018501920190613173565b506040820151600282015560608201516003820155608082015180516110b89160048401916020909101906131f1565b5060a0820151600582015560c0909101516006909101805473ffffffffffffffffffffffffffffffffffffffff19166c0100000000000000000000000090920491909117905560018581018054848b019003905560028601805484019055845160048701805463ffffffff19811663ffffffff91821690930181169290921790556008805478ffffffff000000000000000000000000000000000000000000198116750100000000000000000000000000000000000000000091829004841685019093160291909117905595505b50505050509392505050565b6001606060020a031981166000908152600b602052604090208054600160a060020a031633146111e4576040805161ea748152905160008051602061335e8339815191529181900360200190a16111ef565b600581018054340190555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b60008060008060008087600081518110151561123057fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a03166c010000000000000000000000000281526014019150506040516020818303038152906040526040518082805190602001908083835b602083106112d25780518252601f1990920191602091820191016112b3565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611313573d6000803e3d6000fd5b5050506040513d602081101561132857600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106113745780518252601f199092019160209182019101611355565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156113b5573d6000803e3d6000fd5b5050506040513d60208110156113ca57600080fd5b505193506113d884886121d5565b92506113e486866122ac565b600160a060020a0384811691161461141e576040805161ea6a8152905160008051602061335e8339815191529181900360200190a1611562565b61142886866123c0565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a03161561147e576040805161ea6f8152905160008051602061335e8339815191529181900360200190a1611562565b80543373ffffffffffffffffffffffffffffffffffffffff19918216178255600c805460068401805462ffffff191662ffffff909216919091179055604080518082019091526001606060020a03198516815260006020820181815283546001810185559390915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790920180549151919093166c010000000000000000000000009092049190911774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000911515919091021790555b5050505050505050565b6001606060020a031981166000908152600b602052604081208054909190600160a060020a031633146115c1576040805161ea748152905160008051602061335e8339815191529181900360200190a16116df565b60018201541515806115d65750600282015415155b806115e45750600582015415155b15611611576040805161ea7e8152905160008051602061335e8339815191529181900360200190a16116df565b6006820154600c8054909162ffffff1690811061162a57fe5b60009182526020808320909101805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556001606060020a031986168352600b90915260408220805473ffffffffffffffffffffffffffffffffffffffff191681556001810183905560028101839055909250906116ba600383018261329c565b5060048101805463ffffffff1916905560006005820155600601805462ffffff191690555b505050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a03163314611751576040805161ea748152905160008051602061335e8339815191529181900360200190a16116df565b8181600501541015611785576040805161ea888152905160008051602061335e8339815191529181900360200190a16116df565b600860149054906101000a900460ff1660ff16816002015482600101540102600a54838360050154038115156117b757fe5b0410156117e6576040805161ea928152905160008051602061335e8339815191529181900360200190a16116df565b6005810180548390039055604051339083156108fc029084906000818181858888f1935050505015801561181e573d6000803e3d6000fd5b50505050565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a335780601f10610a0857610100808354040283529160200191610a33565b600073__Set___________________________________636ce8e081600d846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156118dc57600080fd5b505af41580156118f0573d6000803e3d6000fd5b505050506040513d602081101561190657600080fd5b505192915050565b3360009081526001602052604081205482111561192a57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a038716808452928190208054870190558051868152905192939260008051602061337e833981519152929181900390910190a350600192915050565b60085474010000000000000000000000000000000000000000900460ff1681565b6308f0d18081565b600c545b90565b600854600160a060020a031633146119cd57600080fd5b600a55565b600c8054829081106119e057fe5b6000918252602090912001546c010000000000000000000000008102915074010000000000000000000000000000000000000000900460ff1682565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b83811015611b5c578181015183820152602001611b44565b50505050905090810190601f168015611b895780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af1925050501515611bad57600080fd5b5060019392505050565b600754600160a060020a031681565b63ffffffff811660009081526009602090815260408083208054600180830180548551600261010094831615949094026000190190911692909204601f8101879004870283018701909552848252600160a060020a03909216956060959094859487948694859492939092830182828015611c825780601f10611c5757610100808354040283529160200191611c82565b820191906000526020600020905b815481529060010190602001808311611c6557829003601f168201915b50505050509650806002015495508060030154945080600401805480602002602001604051908101604052809291908181526020018280548015611d1157602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611cd45790505b50505060058401546006909401549a9c999b509799969891975091956c0100000000000000000000000002945092505050565b6001606060020a031982166000908152600b6020526040812060038101805483928392909183919087908110611d7657fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b600a5481565b60075460009081908190819081908190819081908190600160a060020a03163314611e1057600080fd5b6001606060020a03198a166000908152600b602052604090208054909850600160a060020a03161515611e65576040805161ea9c8152905160008051602061335e8339815191529181900360200190a161206a565b611e6f8c8b612591565b809750819850829950839a505050505073__Set___________________________________63831cb739600d8d6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b158015611eda57600080fd5b505af4158015611eee573d6000803e3d6000fd5b505050506040513d6020811015611f0457600080fd5b50519250821515611f37576040805161eaa68152905160008051602061335e8339815191529181900360200190a161206a565b6040805160608101825288815260208082018e815261ffff88811694840194855260038d81018054600180820183556000928352959091209551910290940193845590518383015592516002909201805461ffff191692909316919091179091558801805488019055611faa86866123c0565b91506001606060020a03198a81169083161461205a57611fca86866122ac565b600160a060020a03811660008181526001602090815260409182902080548c01905581518b8152915193945091927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c929181900390910190a2604080518881529051600160a060020a0383169160009160008051602061337e8339815191529181900360200190a386985061206a565b6002880180548890039055600098505b50505050505050509392505050565b6000606060008060008060008060008960600151518a6080015163ffffffff161015156120aa5761ead898506121c7565b6302faf0809650896080015193508392505b8a851080156120d557508960600151518363ffffffff16105b156121165760608a0151805163ffffffff85169081106120f157fe5b60209081029091010151516305f5e100979097019694909401936001909201916120bc565b8a8510156121285761eae298506121c7565b868b116121395761eaec98506121c7565b83830391508163ffffffff1660405190808252806020026020018201604052801561216e578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff1610156121bd57838101888263ffffffff168151811015156121a157fe5b63ffffffff909216602092830290910190910152600101612176565b600098508a850395505b505050505092959194509250565b600080600080845160411415156121ef57600093506122a3565b505050602082015160218301516041840151909160001a601b60ff8216101561221657601b015b8060ff16601b1415801561222e57508060ff16601c14155b1561223c57600093506122a3565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015612296573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d019600783089150612306827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d019612740565b90506001808216148415151461231f576401000003d019035b6401000003d019818209821461233457600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061238b5780518252601f19909201916020918201910161236c565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600080826123ee577f0200000000000000000000000000000000000000000000000000000000000000612410565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b602083106124905780518252601f199092019160209182019101612471565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156124d1573d6000803e3d6000fd5b5050506040513d60208110156124e657600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106125325780518252601f199092019160209182019101612513565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612573573d6000803e3d6000fd5b5050604051516c010000000000000000000000000295945050505050565b60008060008061259f6132c0565b600480825260609081908190819081906125bc908d90600061278a565b885281519096509094506125e8908d90869060009081106125d957fe5b90602001906020020151612893565b151560a088015260808701528551612603908d9060026128c2565b8952815190955090935090915061264b908d908490600090811061262357fe5b9060200190602002015185600081518110151561263c57fe5b90602001906020020151612a20565b6001606060020a031916602087015280518190600090811061266957fe5b60209081029091018101516040880152600060608801528601516001606060020a0319908116908c16146126f8576126c38c8360018151811015156126aa57fe5b9060200190602002015185600181518110151561263c57fe5b6001606060020a03191660208701528051819060019081106126e157fe5b602090810290910101516040870152600160608701525b60208601516001606060020a03198c811691161461271557600080fd5b856040015186608001518760a001518860600151995099509950995050505050505092959194509250565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360006005600019f1151561278157600080fd5b51949350505050565b60608060008060008060608060006127a28c8c612a4b565b9b5095508915806127b25750858a115b156127bf578594506127c3565b8994505b846040519080825280602002602001820160405280156127ed578160200160208202803883390190505b5092508460405190808252806020026020018201604052801561281a578160200160208202803883390190505b509150600090505b84811015612883578a838281518110151561283957fe5b6020908102909101015260249a909a01996128548c8c612a4b565b8351909c50909450849083908390811061286a57fe5b6020908102909101015299830160040199600101612822565b50909a9099509650505050505050565b60240160008080806128a58686612a4b565b95506128b390508686612b0d565b50909890975095505050505050565b6060806060600080600080606080606060006128de8e8e612a4b565b9d5096508b15806128ee5750868c115b156128fb578695506128ff565b8b95505b85604051908082528060200260200182016040528015612929578160200160208202803883390190505b50935085604051908082528060200260200182016040528015612956578160200160208202803883390190505b50925085604051908082528060200260200182016040528015612983578160200160208202803883390190505b509150600090505b85811015612a0e5761299f8e8e6040612b44565b82828151811015156129ad57fe5b6020908102909101015260089c909c019b6129c88e8e612a4b565b8551909e509095508d908590839081106129de57fe5b60209081029091010152825185908490839081106129f857fe5b602090810290910101529b84019b60010161298b565b509c919b509998509650505050505050565b6000612a2d848484612e65565b15612a4657612a3f8484600301612fab565b9050610b6d565b610b6d565b60008060008484815181101515612a5e57fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612a9a5760ff81169250839150612b05565b8060ff1660fd1415612abf57612ab285856010612b44565b8460020192509250612b05565b8060ff1660fe1415612ae457612ad785856020612b44565b8460040192509250612b05565b8060ff1660ff1415612b0557612afc85856040612b44565b84600801925092505b509250929050565b606060008060006060600080612b238989613020565b98509250612b3189896130a1565b949b919a50985092965091945050505050565b60008160081415612b81578383815181101515612b5d57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610b6d565b8160101415612bed578383600101815181101515612b9b57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484815181101515612bc757fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610b6d565b8160201415612cbe578383600301815181101515612c0757fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028484600201815181101515612c3857fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585600101815181101515612c6857fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612c9457fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610b6d565b8160401415610b6d578383600701815181101515612cd857fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612d0d57fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612d4157fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612d7457fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028787600301815181101515612da657fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028888600201815181101515612dd757fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028989600101815181101515612e0757fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a815181101515612e3357fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610b6d565b6000816019148015612ea757508383815181101515612e8057fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b8015612ee657508383600101815181101515612ebf57fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b8015612f2557508383600201815181101515612efe57fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b8015612f6457508383601701815181101515612f3d57fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b8015612fa357508383601801815181101515612f7c57fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a02145b949350505050565b600080805b6014811015613009578060130360080285858301815181101515612fd057fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a02820191508080600101915050612fb0565b506c01000000000000000000000000029392505050565b606060008060606130318686613143565b95509150600960ff83161080159061304d575060498260ff1611155b151561305857600080fd5b858581518110151561306657fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16603014151561309157600080fd5b9560ff9091169390930193505050565b6000806000806000806130b48888613143565b97509250602160ff8416146130c857600080fd5b87878151811015156130d657fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b600080838381518110151561315457fe5b016020015160f860020a90819004810204915050600182019250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131b457805160ff19168380011785556131e1565b828001600101855582156131e1579182015b828111156131e15782518255916020019190600101906131c6565b506131ed9291506132f5565b5090565b828054828255906000526020600020906007016008900481019282156132905791602002820160005b8382111561325e57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261321a565b801561328e5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261325e565b505b506131ed92915061330f565b50805460008255600302906000526020600020908101906132bd9190613330565b50565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6119b391905b808211156131ed57600081556001016132fb565b6119b391905b808211156131ed57805463ffffffff19168155600101613315565b6119b391905b808211156131ed576000808255600182015560028101805461ffff191690556003016133365600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582047d2db27ff2dd1ae1ef8860c8dcedeea42b399c9876ace611f38389618dad48f0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0xe53bef1c417c32421fa9a51042c13b7e91c454cf");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> MIN_UNLOCK_VALUE() {
        final Function function = new Function("MIN_UNLOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint24>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> collateralRatio() {
        final Function function = new Function("collateralRatio", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MIN_LOCK_VALUE() {
        final Function function = new Function("MIN_LOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> operatorKeys(BigInteger param0) {
        final Function function = new Function("operatorKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedRelayerContract() {
        final Function function = new Function("trustedRelayerContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKeyCompressed, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKeyCompressed), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOperatorsLength() {
        final Function function = new Function("getOperatorsLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(String dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                convertToNative((List<Uint32>) results.get(4).getValue()), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
